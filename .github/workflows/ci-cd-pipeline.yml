name: CI/CD Pipeline for OWASP Juice Shop

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  setup-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Étape 1 : Vérification du dépôt
    - name: Checkout repository
      uses: actions/checkout@v3

    # Étape 2 : Télécharger et exécuter l'image Docker de Juice Shop
    - name: Pull and Run OWASP Juice Shop Docker Image
      run: |
        docker pull bkimminich/juice-shop
        docker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop

    # Étape 3 : Attendre que l'application soit prête
    - name: Wait for Juice Shop to be ready
      run: |
        for i in {1..10}; do
          if curl -s http://localhost:3000 > /dev/null; then
            echo "Juice Shop is ready!"
            exit 0
          fi
          echo "Waiting for Juice Shop to be ready..."
          sleep 5
        done
        echo "Juice Shop did not start in time."
        exit 1

    # Étape 4 : Vérification que l'application fonctionne
    - name: Verify Application is Running
      run: |
        curl -I http://localhost:3000


    # Étape 5 : Ajouter les tests de sécurité avec CodeQL (SAST)
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    # Étape 6 : Exécuter l'analyse de CodeQL
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Utilisation du token GitHub pour l'authentification

    # Étape 7 : Télécharger les résultats de l'analyse CodeQL (SARIF)
    - name: Upload CodeQL Results to GitHub
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: ./results/javascript.sarif
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Ajout du token pour uploader les résultats