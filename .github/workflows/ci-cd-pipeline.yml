name: CI/CD Pipeline for OWASP Juice Shop

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  contents: write
  actions: read
  security-events: write

jobs:
  setup-and-deploy:
    runs-on: ubuntu-latest
    steps:
    # Étape 1 : Vérification du dépôt
    - name: Checkout repository
      uses: actions/checkout@v3

    # Étape 2 : Configurer Docker et lancer Juice Shop
    - name: Setup Docker and Run Juice Shop
      run: |
        docker pull bkimminich/juice-shop
        docker run -d -p 3000:3000 --name juice-shop bkimminich/juice-shop
        echo "Juice Shop container started."

    # Étape 3 : Attendre que Juice Shop soit prêt
    - name: Wait for Juice Shop to be ready
      run: |
        for i in {1..12}; do
          if curl -s http://localhost:3000 > /dev/null; then
            echo "Juice Shop is ready."
            exit 0
          fi
          echo "Waiting for Juice Shop to be ready..."
          sleep 5
        done
        echo "Timeout: Juice Shop did not start."
        exit 1

    # Étape 4 : Vérification du fonctionnement de l'application
    - name: Verify Application Status
      run: |
        HTTP_STATUS=$(curl -o /dev/null -s -w '%{http_code}' http://localhost:3000)
        if [ "$HTTP_STATUS" -ne 200 ]; then
          echo "Application responded with HTTP status $HTTP_STATUS"
          exit 1
        fi
        echo "Application is running with HTTP 200."

  codeql-analysis:
    runs-on: ubuntu-latest
    needs: setup-and-deploy
    steps:
    # Étape 1 : Vérification du dépôt
    - name: Checkout repository
      uses: actions/checkout@v3

    # Étape 2 : Initialisation de CodeQL
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    # Étape 3 : Analyse avec CodeQL
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  zap_scan:
    runs-on: ubuntu-latest
    needs: setup-and-deploy
    steps:
    # Étape 1 : Lancer un scan OWASP ZAP
    - name: Perform ZAP Scan
      uses: zaproxy/action-baseline@v0.13.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        target: 'http://localhost:3000'
        fail_action: false

    # Étape 2 : Compresser les résultats du scan
    - name: Archive ZAP Scan Results
      run: |
        mkdir -p reports
        mv *.html reports/
        zip -r zap-scan-results.zip reports/

    # Étape 3 : Charger les résultats comme artefact
    - name: Upload ZAP Scan Results
      uses: actions/upload-artifact@v3
      with:
        name: zap-scan-results
        path: zap-scan-results.zip

  snyk-scan:
    runs-on: ubuntu-latest
    needs: setup-and-deploy
    steps:
    # Étape 1 : Vérification du dépôt
    - name: Checkout repository
      uses: actions/checkout@v3

    # Étape 2 : Exécuter Snyk sur l'image Docker
    - name: Snyk Vulnerability Scan
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: bkimminich/juice-shop

  cleanup:
    runs-on: ubuntu-latest
    needs: [setup-and-deploy, zap_scan, snyk-scan, codeql-analysis]
    steps:
    # Étape : Arrêter et supprimer le conteneur Docker
    - name: Cleanup Docker Container
      run: |
        docker stop juice-shop || true
        docker rm juice-shop || true
        docker image prune -f
